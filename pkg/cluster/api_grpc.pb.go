// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cluster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TopNClient is the client API for TopN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopNClient interface {
	TopNInBlock(ctx context.Context, in *TopNInBlockRequest, opts ...grpc.CallOption) (*TopNInBlockResponse, error)
	TopNAll(ctx context.Context, in *TopNInBlockRequest, opts ...grpc.CallOption) (*TopNInBlockResponse, error)
}

type topNClient struct {
	cc grpc.ClientConnInterface
}

func NewTopNClient(cc grpc.ClientConnInterface) TopNClient {
	return &topNClient{cc}
}

func (c *topNClient) TopNInBlock(ctx context.Context, in *TopNInBlockRequest, opts ...grpc.CallOption) (*TopNInBlockResponse, error) {
	out := new(TopNInBlockResponse)
	err := c.cc.Invoke(ctx, "/mapper.TopN/TopNInBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topNClient) TopNAll(ctx context.Context, in *TopNInBlockRequest, opts ...grpc.CallOption) (*TopNInBlockResponse, error) {
	out := new(TopNInBlockResponse)
	err := c.cc.Invoke(ctx, "/mapper.TopN/TopNAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopNServer is the server API for TopN service.
// All implementations must embed UnimplementedTopNServer
// for forward compatibility
type TopNServer interface {
	TopNInBlock(context.Context, *TopNInBlockRequest) (*TopNInBlockResponse, error)
	TopNAll(context.Context, *TopNInBlockRequest) (*TopNInBlockResponse, error)
	mustEmbedUnimplementedTopNServer()
}

// UnimplementedTopNServer must be embedded to have forward compatible implementations.
type UnimplementedTopNServer struct {
}

func (*UnimplementedTopNServer) TopNInBlock(context.Context, *TopNInBlockRequest) (*TopNInBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopNInBlock not implemented")
}
func (*UnimplementedTopNServer) TopNAll(context.Context, *TopNInBlockRequest) (*TopNInBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopNAll not implemented")
}
func (*UnimplementedTopNServer) mustEmbedUnimplementedTopNServer() {}

func RegisterTopNServer(s *grpc.Server, srv TopNServer) {
	s.RegisterService(&_TopN_serviceDesc, srv)
}

func _TopN_TopNInBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopNInBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopNServer).TopNInBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapper.TopN/TopNInBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopNServer).TopNInBlock(ctx, req.(*TopNInBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopN_TopNAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopNInBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopNServer).TopNAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapper.TopN/TopNAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopNServer).TopNAll(ctx, req.(*TopNInBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TopN_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mapper.TopN",
	HandlerType: (*TopNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TopNInBlock",
			Handler:    _TopN_TopNInBlock_Handler,
		},
		{
			MethodName: "TopNAll",
			Handler:    _TopN_TopNAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/cluster/api.proto",
}
